@model IEnumerable<ITInventory.Models.OrderProduct>

@{
    ViewBag.Title = "Home";
    }
<div id="inputDiv" style="padding-bottom: 50px;">
    <input type="text" id="productName" placeholder="Start typing product name to search" />    
</div>
<div class="row">
    <div class="container col-md-8">
        @(Html.Kendo().Grid<ITInventory.Models.AllocationViewModel>()
.Name("grid")
.Columns(column =>
    {
        column.Bound(c => c.ProductName).HtmlAttributes(new { @class = "productName" }).Title("Product");
        column.Bound(c => c.StockLevel).Title("Stock");
        column.Bound(c => c.OnOrder).Title("On Order");
    })
        .HtmlAttributes(new { style = "height: 700px;", @class = "mainGrid" })
        .Scrollable()
        .Filterable()
        .Groupable()
        .Sortable()
        .ClientDetailTemplateId("template")
        .DataSource(dataSource => dataSource
        .Ajax()
        .ServerOperation(false)
        .Model(model => model.Id(p => p.Id))
        .Read(read => read.Action("Products_Read", "Home").Type(HttpVerbs.Get))
        .PageSize(100))
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .PageSizes(new int[] { 10, 20, 100, 200 })
            .ButtonCount(5))
        )
    </div>
        <div id="orderDiv" class="container col-md-4">
            <h2>Current Cart - User: @HDUtilities.UserInformation.GetCurrentUserName()</h2>
            @(Html.Kendo().Grid<ITInventory.Models.OrdersViewModel>()
                .Name("grid-order")
                .Columns(column =>
                {
                    column.Bound(c => c.ProductName).Width(50);
                    column.Bound(c => c.Quantity).Width(50);
                    column.Bound(c => c.Id).ClientTemplate("<input type='button' class='removeFromOrder' id='#=Id#' value='Delete'/>").Width(50);
                })
            .HtmlAttributes(new { @class = "orderGrid" })
            .Scrollable()
            .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("Get_Order", "Home").Type(HttpVerbs.Get))
            .PageSize(100))
)
            <div class="row">
                <button id="finalizeOrder" class="col-md-5 btn btn-primary">Order</button>
                <button class="col-md-5 btn btn-primary">Allocate</button>
            </div>
        </div>
    </div>
<script id="template" type="text/kendo-tmpl">



    @(Html.Kendo().Grid<ITInventory.Models.AllocationViewModel>()
                .Name("grid_#=ProductId#")
                .Columns(columns =>
                    {
                        columns.Template(@<text></text>).ClientTemplate("<input type=\"button\" class=\"addToCart\", id=\"#=ProductId#\" value = 'Add to Cart' />");
                        columns.Template(@<text></text>).Title("Order Qty").ClientTemplate("<input type=\"number\" class=\"orderVal\", id=\"#=ProductName#\" style=\"width: 50px;\", value = 0 />");
                        columns.Bound(x => x.Quantity);
                        columns.Bound(x => x.SellPrice).Format("{0:c}");

                    })
                    .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(5)
                                    .Read(read => read.Action("Create_SubPrices", "Allocation", new { ProductId = "#=ProductId#" }).Type(HttpVerbs.Get))
                        )
                        .Pageable()
                        .Sortable()
                        .ToClientTemplate())
</script>
<script>
        $(document).on('click', '.removeFromOrder', function(){

            $.ajax({
                url: "@Url.Action("DeleteFromOrder", "Home")",
                type: 'POST',
            data: JSON.stringify({
                Id : $(this).id
            }),
            contentType: 'application/json',
            success: function(result){
                if(result.Result){
                    location.href = "@Url.Action("Index", "Home")";
                }
            }
        })
        });

    $(document).on('click', '.addToCart', function () {
        var productId = this.id;
        var orderQty = this.parentNode.nextSibling.children[0].value;

        $.ajax({
            url: "@Url.Action("AddtoOrder", "Home")",
            type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            OrderQty: orderQty,
            ProductId: productId
        }),
        success: function (result) {
            if (result.Result)
                location.href = "@Url.Action("Index", "Home")";
        }
    })
    });

    $("#viewOrder").click(function(){
        $("#cart").css("display", "block")
    });

    $(document).ready(function(){
        $("#tabstrip").hide();
    });

    function addCloseClickHandlers() {
        var tabstrip = jQuery('#tabstrip').data("kendoTabStrip");
        jQuery('.fa-close').unbind("click").on("click", function () {
            tabstrip.remove(jQuery(this).closest("li"));
            tabstrip.select(tabstrip.items().length - 2);
        });
    }

    jQuery(document).ready(function () {
        jQuery('#tabstrip').kendoTabStrip();
        var tabstrip = jQuery('#tabstrip').data("kendoTabStrip");
        tabstrip.select(0);
        jQuery('#add-button').kendoButton({
            click: function () {
                var lastIndex = tabstrip.items().length;
                tabstrip.insertBefore([{
                    text: '<i class="fa fa-envelope" aria-hidden="true"/><span class="tab">Email ' + lastIndex + '</span><i id="tab-close-' + lastIndex + '" class="fa fa-close"></i>',
                    encoded: false,//The backticks create a template literal that VS doesn't recognize yet. It works like it is supposed to on Chrome, so you don't need to change it.
                    content:`<div id = ` + lastIndex + `><div class="col-md-10">@Html.DropDownList("VendorEmails", null, htmlAttributes: new { @class = "form-control vendorEmail", @style = "width: 280px" })</div><div class="col-md-10"><textarea style="width: 300px; height: 200px;" placeholder="Type email for vendor here" class="vendorMessages"></textarea></div></div>`
                    }], tabstrip.items()[lastIndex - 1]);
        addCloseClickHandlers();
    }
    });
    addCloseClickHandlers();
    });

    $("#productName").keyup(function () {
        var selecteditem = $("#productName").val();
        var kgrid = $("#grid").data("kendoGrid");
        selecteditem = selecteditem.toUpperCase();
        var selectedArray = selecteditem.split(" ");
        if (selecteditem) {
            var orfilter = { logic: "or", filters: [] };
            var andfilter = { logic: "and", filters: [] };

            $.each(selectedArray, function (i, v1) {
                if (v1.trim() == "") {
                }
                else {
                    $.each(selectedArray, function (i, v1) {
                        if (v1.trim() == "") { }
                        else {
                            orfilter.filters.push({ field: "ProductName", operator: "contains", value: v1 });
                            andfilter.filters.push(orfilter);
                            orfilter = { logic: "or", filters: [] };
                        }
                    })
                }
            });
            kgrid.dataSource.filter(andfilter);

        }
        else {
            kgrid.dataSource.filter({});
        }
    });

    function createOrderList(itemName, itemOrder) {
        $("#orderList").append('<p><input style="width=50px;" id="'+ itemName +'" class="orderedItem" type="number" value="' + itemOrder + '" /> ' + itemName + '</p>')
    }

    function createEmail(vend) {

        if ($(vend).is(":checked")) {
            $("#tabstrip").show();
        }
        else {
            $("#tabstrip").hide();
        }
    }

    var productNames = [];
    var productQty = [];
    var stockLevel = [];
    var productCost = [];
   
    $(document).on('change', '.orderCheckbox', function () {

        if (this.checked) {
            productNames.push(this.id);
            productQty.push(this.parentNode.nextSibling.childNodes[0].value);
            productCost.push(this.parentNode.nextSibling.nextSibling.nextSibling.nextSibling.innerText);
            stockLevel.push(this.parentNode.nextSibling.nextSibling.nextSibling.nextSibling.nextSibling.childNodes[0].value)
        }
        else {
            productNames.splice(productNames.indexOf(this.id), 1);
            productQty.splice(productQty.indexOf(this.parentNode.nextSibling.childNodes[0].value), 1);
            productCost.splice(stockLevel.indexOf(this.parentNode.nextSibling.nextSibling.nextSibling.nextSibling.innerText),1)
            stockLevel.splice(stockLevel.indexOf(this.parentNode.nextSibling.nextSibling.nextSibling.nextSibling.nextSibling.childNodes[0].value),1)
        }

        $("#selected").text(productNames);
    });
    $("#submit").click(function () {
        if (productNames.length == 0) {
            alert("You must select a product")
        }
        else {
            $("#orderList").show();
            $("#confirm").show();
            $("#reset").show();
            $("#emailVend").show();
            $(".orderCheckbox").attr("disabled", true);
            for (i = 0; i < productNames.length; i++) {
                createOrderList(productNames[i], productQty[i])
            }
            $("#selected").text("");
            $("#productName").hide();
            $("#grid").fadeOut();
        }
    });



    $(document).on('change', '.orderVal', function () {
        var x = productNames.indexOf(this.id);
        productQty[x] = this.value;
    });
    $(document).on('change', '.orderedItem', function () {
        var x = productNames.indexOf(this.id);
        productQty[x] = this.value;
    });

    $("#reset").click(function () {
        productNames = [];
        productQty = [];
        $("#tabstrip").hide();
        $("#orderList").text("");
        $("#productName").show();
        $("#confirm").hide()
        $("#reset").hide()
        $("#emailVend").hide();
        $("#grid").fadeIn();
        $(".orderCheckbox").attr("disabled", false);
        $(".orderCheckbox").prop("checked", false);
    });


    $("#confirm").click(function () {

        var vendEmails = [];
        var vendMessages = [];

        for(var x = 0; x < $(".vendorEmail").length; x++){
            if($(".vendorMessages")[x].value != null){
                vendMessages.push($(".vendorMessages")[x].value)
                vendEmails.push($(".vendorEmail")[x].value);
            }
        }

        var data = {};

        data.productList = productNames;
        data.orderQty = productQty;
        data.productCost = productCost;
        data.vendorEmails = vendEmails;
        data.vendorMessages = vendMessages;

        $.ajax({
            url: "@Url.Action("ConfirmOrder", "Home")",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            dataType:"json",
            success: function (result) {
                if (result.Result)
                    location.href = "@Url.Action("Index", "Home")";
            }
        });
    });


    $("#finalizeOrder").click(function(){
        $.ajax({
            url: "@Url.Action("ConfirmOrder", "Home")",
            type: 'POST',
            contentType: 'application/json',
            success: function(result){
                if(result.Result){
                    location.href = "@Url.Action("Index", "Home")";
                }
            }
        })
    })
</script>
