@model IEnumerable<ITInventory.Models.OrderProduct>
@using Kendo.Mvc.UI.Fluent;
@{
    ViewBag.Title = "Home";
    }
<div id="inputDiv" style="padding-bottom: 50px;">
    <input type="text" id="productName" placeholder="Start typing product name to search" />    

</div>

<h4>Group by category?</h4>
<input class="tgl tgl-flip" id="cb5" type="checkbox" />
<label class="tgl-btn" data-tg-off="No" data-tg-on="Yes" for="cb5"></label>

<div class="row">
    <div class="container col-md-8">
        <button type="button" id="addToCart">Update Cart</button>
        @(Html.Kendo().Grid<ITInventory.Models.AllocationViewModel>()
.Name("grid")
.Columns(column =>
    {
        column.Bound(c => c.ProductName).HtmlAttributes(new { @class = "productName" }).Title("Product");
        column.Bound(c => c.StockLevel).Title("Stock");
        column.Bound(c => c.OnOrder).Title("On Order");
        column.Bound(c => c.SellPrice).Format("{0:c}").Title("Current Price");
        column.Template(@<text></text>).ClientTemplate("<input type='number' id ='#=ProductId#' value = '#=Quantity#' class='orderQuantity' />").Title("Quantity");
        column.Bound(c => c.CategoryName).Hidden();
    })
        .HtmlAttributes(new { style = "height: 700px;", @class = "mainGrid" })
        .Scrollable()
        .Filterable()
        .Sortable()
        .ClientDetailTemplateId("template")
        .DataSource(dataSource => dataSource
            
        .Ajax()
        .ServerOperation(false)
        .Model(model => model.Id(p => p.Id))
        .Read(read => read.Action("Products_Read", "Home").Type(HttpVerbs.Get))
        .PageSize(200))
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .PageSizes(new int[] { 10, 20, 100, 200 })
            .ButtonCount(5))
        .Events(events => events
            .DataBound("onDataBound"))
        )
        <br />
    </div>
    @if (Model.Where(r => r.LastEditUser == HDUtilities.UserInformation.GetCurrentUserName() && r.Order.Submitted != true).Count() > 0)
    {
        <div id="orderDiv" class="container col-md-4">
            <h2>Current Cart</h2>
            @(Html.Kendo().Grid<ITInventory.Models.OrdersViewModel>()
                .Name("grid-order")
                .Columns(column =>
                {
                    column.Bound(c => c.ProductName).Width(50);
                    column.Bound(c => c.Quantity).Width(50);
                    column.Bound(c => c.Id).ClientTemplate("<input type='button' class='removeFromOrder' id='#=Id#' value='Delete'/>").Width(50);
                })
            .HtmlAttributes(new { @class = "orderGrid" })
            .Scrollable()
            .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("Get_Order", "Home").Type(HttpVerbs.Get))
            .PageSize(100))
            .Pageable(pageable => pageable
                .Refresh(true))
)
            <div class="row">
                <a href="~/Confirmation/Order" id="finalizeOrder" class="col-md-5 btn btn-primary">Order</a>
                <a href="~/Confirmation/Allocate" class="col-md-5 btn btn-primary">Allocate</a>
            </div>
        </div>
            }
    </div>
<script id="template" type="text/kendo-tmpl">

    @(Html.Kendo().Grid<ITInventory.Models.AllocationViewModel>()
                .Name("grid_#=ProductId#")
                .Columns(columns =>
                    {
                        columns.Bound(x => x.ProductName).Hidden();
                        columns.Bound(x => x.Quantity);
                        columns.Bound(x => x.SellPrice).Format("{0:c}");
                    })
                    .Events(events => events
                    .DataBound("onDataBoundSub"))
                    .DataSource(dataSource => dataSource
                            .Ajax()
                            .PageSize(5)
                                    .Read(read => read.Action("Create_SubPrices", "Home", new { ProductId = "#=ProductId#" }).Type(HttpVerbs.Get))
                        )
                        .Pageable()
                        .Sortable()
                        .ToClientTemplate()
                        )
</script>
<script>
    
    function onDataBoundSub(e) {
        var grid = this;

        var columns = e.sender._data;

        for (i = 0; i < grid.columns.length; i++) {
            var columnInfo = grid.columns[i];
            for (j = 0; j < columns.length; j++) {
                if (columnInfo.field == "ProductName") {
                    if (columns[j].CategoryName == "Kit") {
                        grid.showColumn(i);
                    }
                }
            }
        }
    }

    var group = false;

    $(document).on('click', '#cb5', function () {
        var grid = $("#grid").data("kendoGrid");
        if ($("#cb5").is(":checked")) {
            grid.dataSource.group({ field: "CategoryName" });
        }
        else {
            grid.dataSource.group([]);
        }
    })

    function onDataBound(e) {
        var grid = this;
        if (grid.dataSource.group().length > 0) {
            $(".k-grouping-row").each(function () {
                grid.collapseGroup(this)
            });
        }
    }

    var orderQty = [];
    var productId = [];

    var i = 0;

    $(document).on('click', '.orderQuantity', function () {
        this.value = "";
    });
    $(document).on('keyup', '.orderQuantity', function () {
        if(productId.indexOf(this.id) != -1){
            orderQty[productId.indexOf(this.id)] = this.value;
        }
        else{
            productId.push(this.id);
            orderQty.push(this.value);
        }
        

        if (this.value < 0 && (this.value != "-" || this.value != "")) {
            this.value = 0;
            i++
            checkI();
        }
    });
        $(document).on('click', '.removeFromOrder', function(){

            $.ajax({
                url: "@Url.Action("DeleteFromOrder", "Home")",
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    ProductId : this.id
            }),
            success: function(result){
                if(result.Result){
                    location.href = "@Url.Action("Index", "Home")";
                }
            }
        })
        });

    $(document).on('click', '#addToCart', function () {

        $("body").addClass("loading");


        var successful = false;

        for (var x = 0; x < productId.length; ++x) {

            $.ajax({
                url: "@Url.Action("AddtoOrder", "Home")",
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    OrderQty: orderQty[x],
                    ProductId: productId[x]
                }),
                success: function (result) {
                    if (result.Result) {
                        successful = true;
                    }
                    else {
                        successful = false;
                    }
                }
            })
        }
            
            setTimeout(location.reload.bind(location), 4000);
        
        
    });

    $("#viewOrder").click(function(){
        $("#cart").css("display", "block")
    });

    $(document).ready(function(){
        $("#tabstrip").hide();
    });

    function addCloseClickHandlers() {
        var tabstrip = jQuery('#tabstrip').data("kendoTabStrip");
        jQuery('.fa-close').unbind("click").on("click", function () {
            tabstrip.remove(jQuery(this).closest("li"));
            tabstrip.select(tabstrip.items().length - 2);
        });
    }

    $("#productName").keyup(function () {
        var selecteditem = $("#productName").val();
        var kgrid = $("#grid").data("kendoGrid");
        selecteditem = selecteditem.toUpperCase();
        var selectedArray = selecteditem.split(" ");
        if (selecteditem) {
            var orfilter = { logic: "or", filters: [] };
            var andfilter = { logic: "and", filters: [] };

            $.each(selectedArray, function (i, v1) {
                if (v1.trim() == "") {
                }
                else {
                    $.each(selectedArray, function (i, v1) {
                        if (v1.trim() == "") { }
                        else {
                            orfilter.filters.push({ field: "ProductName", operator: "contains", value: v1 });
                            andfilter.filters.push(orfilter);
                            orfilter = { logic: "or", filters: [] };
                        }
                    })
                }
            });
            kgrid.dataSource.filter(andfilter);

        }
        else {
            kgrid.dataSource.filter({});
        }
    });

    function createOrderList(itemName, itemOrder) {
        $("#orderList").append('<p><input style="width=50px;" id="'+ itemName +'" class="orderedItem" type="number" value="' + itemOrder + '" /> ' + itemName + '</p>')
    }

    function createEmail(vend) {

        if ($(vend).is(":checked")) {
            $("#tabstrip").show();
        }
        else {
            $("#tabstrip").hide();
        }
    }

    var productNames = [];
    var productQty = [];
    var stockLevel = [];
    var productCost = [];
   

    $(document).on('change', '.orderVal', function () {
        var x = productNames.indexOf(this.id);
        productQty[x] = this.value;
    });
    $(document).on('change', '.orderedItem', function () {
        var x = productNames.indexOf(this.id);
        productQty[x] = this.value;
    });
    function checkI() {
        if (i == 4) {
            alert("Negative values are not accepted. In order to change the amount displayed as stock, please use the edit function on the products page");
        }
        else if (i == 6) {
            alert("Seriously, you can't order a negative amount of things");
        }
        else if (i == 8) {
            alert("Come on man, this is getting ridiculous");
        }
        else if (i == 10) {
            alert("Look, I can't be responsible for what's going to happen if you keep this up");
        }
        else if (i == 12) {
            alert("Fine. Be that way");
        }
        else if (i == 15) {
            alert("You have attemtped to order negative values too many times and have entered the negative zone");
            $(".k-grid").addClass("w3-spin");
            $("body").addClass("w3-spin");
            $(document.documentElement).css("filter", "invert(100%)");
        }
    }
</script>
