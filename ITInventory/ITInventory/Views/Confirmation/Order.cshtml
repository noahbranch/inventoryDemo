@model ITInventory.Models.Vendor

@{
    ViewBag.Title = "Order";
}

<h2>Order</h2>
<div class="row">
    <div class="col-md-4">
        @(Html.Kendo().Grid<ITInventory.Models.OrdersViewModel>()
    .Name("grid-order")
    .Columns(column =>
    {
        column.Bound(c => c.ProductName).Width(50);
        column.Bound(c => c.Quantity).Width(50);
        column.Bound(c => c.LastEditUser).Width(50);
    })
    .HtmlAttributes(new { @class = "orderGrid" })
    .Scrollable()
    .DataSource(dataSource => dataSource
    .Ajax()
    .ServerOperation(false)
    .Model(model => model.Id(p => p.Id))
    .Read(read => read.Action("Get_Order", "Confirmation").Type(HttpVerbs.Get))
    .PageSize(100)))
        <button id="finalizeOrder" class="btn btn-primary">Order these items</button>
        @*<button id="emailVendor" class="btn btn-primary">Email Vendor</button>*@
    </div>
    <div class="col-md-7">
        <div class="col-md-12" id="emailDiv">
            <div id="tabstrip">
                <ul>
                    <li>
                        <i class="fa fa-envelope"></i>
                        <span class="tab">Email One</span>
                        <i id="tab-close-1" class="fa fa-close"></i>
                    </li>
                    <li>
                        <i class="fa fa-plus"></i>
                    </li>
                </ul>
                <div>
                    <div class="overlay">
                        <div class="contain">
                            <div class="box">
                                <div class="border one"></div>
                                <div class="border two"></div>
                                <div class="border three"></div>
                                <div class="border four"></div>

                                <div class="line one"></div>
                                <div class="line two"></div>
                                <div class="line three"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <h3>Email Vendor(s)</h3>
                        <p>Subject <input type="text" /></p>
                        <p>To @Html.DropDownListFor(model => model.Email, ViewBag.Vendors as SelectList, "", htmlAttributes: new { id = "singleSel", @class="comboBoxen", style = "width: 300px;", placeholder = "Start typing vendor email" }) <input type="email" class="customEmail" /></p>
                        <p>From <input type="email" /></p>
                    </div>
                    <div class="col-md-12">
                        <textarea class="emailBody"></textarea>
                        <p><button class="btn btn-primary sendEmail" value="1" type="button">Send Email</button></p>
                    </div>
                </div>
                <div>
                    Add a new view tab.
                    <br>
                    <button id="add-button">Add Tab</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script>


    $(document).on('click', '.sendEmail', function(){

        var emailInfo = $("#tabstrip-" + this.value);

        var subject;
        var toEmail;
        var mailBody;
        var backGround;
        var fromEmail;
        
        if(parseInt(this.value) > 1){
            subject =  emailInfo[0].children[0].children[1].children[1].children[0].value;
            toEmail =  emailInfo[0].children[0].children[1].children[2].children[0].selectedOptions[0].value;
            mailBody = emailInfo[0].children[0].children[2].children[0].value;
            fromEmail = emailInfo[0].children[0].children[1].children[3].children[0].value;
            backGround = emailInfo[0].children[0].children[0];
        }
        else{
            subject = emailInfo[0].children[1].children[1].children[0].value;
            toEmail = emailInfo[0].children[1].children[2].children.Email.selectedOptions[0].value;
            mailBody = emailInfo[0].children[2].children[0].value;
            fromEmail = emailInfo[0].children[1].children[3].children[0].value;
            backGround = emailInfo[0].children[0];
        }
        
        if(subject != null && toEmail != null && mailBody != null){
            $.ajax({
                url: "@Url.Action("SendEmail", "Confirmation")",
                type: 'POST',
                contentType: 'application/json', 
                data: JSON.stringify({
                    Subject: subject,
                    ToAddress: toEmail,
                    messageBody: mailBody,
                    FromAddress: fromEmail
                }),
                success: function (result) {
                    if (result.Result) {
                        $(backGround).css("display", "block");
                    }
                }
            });
        }
    });

    $("#finalizeOrder").click(function () {
        $.ajax({
            url: "@Url.Action("ConfirmOrder", "Home")",
            type: 'POST',
            contentType: 'application/json',
            success: function (result) {
                if (result.Result) {
                    location.href = "@Url.Action("Index", "Home")";
                }
            }
        });
    });

    function addCloseClickHandlers() {
        var tabstrip = jQuery('#tabstrip').data("kendoTabStrip");
        jQuery('.fa-close').unbind("click").on("click", function () {
            tabstrip.remove(jQuery(this).closest("li"));
            tabstrip.select(tabstrip.items().length - 2);
        });
    }

    jQuery(document).ready(function () {
        jQuery('#tabstrip').kendoTabStrip();
        var tabstrip = jQuery('#tabstrip').data("kendoTabStrip");
        tabstrip.select(0);
        jQuery('#add-button').kendoButton({
            click: function () {
                var lastIndex = tabstrip.items().length;
                tabstrip.insertBefore([{
                    text: '<i class="fa fa-envelope"></i><span class="tab">Email ' + lastIndex + '</span><i id="tab-close-' + lastIndex + '" class="fa fa-close"></i>',
                    encoded: false,
                    content: `<div>
                        <div class="overlay">
                        <div class="contain">
                            <div class="box">
                                <div class="border one"></div>
                                <div class="border two"></div>
                                <div class="border three"></div>
                                <div class="border four"></div>

                                <div class="line one"></div>
                                <div class="line two"></div>
                                <div class="line three"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <h3>Email Vendor(s)</h3>
                        <p>Subject <input type="text" /></p>
                        <p>To @Html.DropDownListFor(model => model.Email, ViewBag.Vendors as SelectList, "", htmlAttributes: new { id = "singleSel", @class="comboBoxen", style = "width: 300px;", placeholder = "Start typing vendor email" })</p>
                        <p>From <input type="email" /></p>
                    </div>
                    <div class="col-md-12">
                        <textarea class="emailBody"></textarea>
                        <p><button class="btn btn-primary sendEmail" value="` + lastIndex + `" type="button">Send Email</button></p>
                    </div>
                </div>`
                    }], tabstrip.items()[lastIndex - 1]);
                addCloseClickHandlers();
            }
        });
        addCloseClickHandlers();
    });
</script>